// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: options.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createOptions = `-- name: CreateOptions :execrows
INSERT INTO options (poll_id, name)
VALUES ($1, UNNEST($2::text[]))
RETURNING id, name, created_at, updated_at, poll_id
`

type CreateOptionsParams struct {
	PollID  uuid.UUID
	Column2 []string
}

func (q *Queries) CreateOptions(ctx context.Context, arg CreateOptionsParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createOptions, arg.PollID, pq.Array(arg.Column2))
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteOption = `-- name: DeleteOption :exec
DELETE FROM options
WHERE id = $1
`

func (q *Queries) DeleteOption(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOption, id)
	return err
}

const getOptionByID = `-- name: GetOptionByID :one
SELECT id, name, created_at, updated_at, poll_id
FROM options
WHERE id = $1
`

type GetOptionByIDRow struct {
	ID        uuid.UUID
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
	PollID    uuid.UUID
}

func (q *Queries) GetOptionByID(ctx context.Context, id uuid.UUID) (GetOptionByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getOptionByID, id)
	var i GetOptionByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PollID,
	)
	return i, err
}

const getOptionsByPollID = `-- name: GetOptionsByPollID :many
SELECT id, name, count, created_at, updated_at, poll_id
FROM options
WHERE poll_id = $1
`

type GetOptionsByPollIDRow struct {
	ID        uuid.UUID
	Name      string
	Count     int32
	CreatedAt time.Time
	UpdatedAt time.Time
	PollID    uuid.UUID
}

func (q *Queries) GetOptionsByPollID(ctx context.Context, pollID uuid.UUID) ([]GetOptionsByPollIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getOptionsByPollID, pollID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOptionsByPollIDRow
	for rows.Next() {
		var i GetOptionsByPollIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Count,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PollID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOptionsByPollIDs = `-- name: GetOptionsByPollIDs :many
SELECT id, name, poll_id, count, created_at, updated_at FROM options
WHERE poll_id = ANY($1::uuid[])
`

func (q *Queries) GetOptionsByPollIDs(ctx context.Context, dollar_1 []uuid.UUID) ([]Option, error) {
	rows, err := q.db.QueryContext(ctx, getOptionsByPollIDs, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Option
	for rows.Next() {
		var i Option
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PollID,
			&i.Count,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOption = `-- name: UpdateOption :one
UPDATE options
SET name = coalesce($2, name), updated_at = now()
WHERE id = $1
RETURNING id, name, created_at, updated_at, poll_id
`

type UpdateOptionParams struct {
	ID   uuid.UUID
	Name string
}

type UpdateOptionRow struct {
	ID        uuid.UUID
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
	PollID    uuid.UUID
}

func (q *Queries) UpdateOption(ctx context.Context, arg UpdateOptionParams) (UpdateOptionRow, error) {
	row := q.db.QueryRowContext(ctx, updateOption, arg.ID, arg.Name)
	var i UpdateOptionRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PollID,
	)
	return i, err
}
