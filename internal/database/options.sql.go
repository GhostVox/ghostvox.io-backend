// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: options.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createOption = `-- name: CreateOption :one
INSERT INTO options (name, value, poll_id)
VALUES ($1, $2, $3)
RETURNING id, name, value, created_at, updated_at, poll_id
`

type CreateOptionParams struct {
	Name   string
	Value  string
	PollID uuid.UUID
}

type CreateOptionRow struct {
	ID        uuid.UUID
	Name      string
	Value     string
	CreatedAt time.Time
	UpdatedAt time.Time
	PollID    uuid.UUID
}

func (q *Queries) CreateOption(ctx context.Context, arg CreateOptionParams) (CreateOptionRow, error) {
	row := q.db.QueryRowContext(ctx, createOption, arg.Name, arg.Value, arg.PollID)
	var i CreateOptionRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PollID,
	)
	return i, err
}

const deleteOption = `-- name: DeleteOption :exec
DELETE FROM options
WHERE id = $1
`

func (q *Queries) DeleteOption(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOption, id)
	return err
}

const getOptionByID = `-- name: GetOptionByID :one
SELECT id, name, value, created_at, updated_at, poll_id
FROM options
WHERE id = $1
`

type GetOptionByIDRow struct {
	ID        uuid.UUID
	Name      string
	Value     string
	CreatedAt time.Time
	UpdatedAt time.Time
	PollID    uuid.UUID
}

func (q *Queries) GetOptionByID(ctx context.Context, id uuid.UUID) (GetOptionByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getOptionByID, id)
	var i GetOptionByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PollID,
	)
	return i, err
}

const getOptionsByPollID = `-- name: GetOptionsByPollID :many
SELECT id, name, value, created_at, updated_at, poll_id
FROM options
WHERE poll_id = $1
`

type GetOptionsByPollIDRow struct {
	ID        uuid.UUID
	Name      string
	Value     string
	CreatedAt time.Time
	UpdatedAt time.Time
	PollID    uuid.UUID
}

func (q *Queries) GetOptionsByPollID(ctx context.Context, pollID uuid.UUID) ([]GetOptionsByPollIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getOptionsByPollID, pollID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOptionsByPollIDRow
	for rows.Next() {
		var i GetOptionsByPollIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Value,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PollID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOption = `-- name: UpdateOption :one
UPDATE options
SET name = coalesce($2, name), value = coalesce($3, value), updated_at = now()
WHERE id = $1
RETURNING id, name, value, created_at, updated_at, poll_id
`

type UpdateOptionParams struct {
	ID    uuid.UUID
	Name  string
	Value string
}

type UpdateOptionRow struct {
	ID        uuid.UUID
	Name      string
	Value     string
	CreatedAt time.Time
	UpdatedAt time.Time
	PollID    uuid.UUID
}

func (q *Queries) UpdateOption(ctx context.Context, arg UpdateOptionParams) (UpdateOptionRow, error) {
	row := q.db.QueryRowContext(ctx, updateOption, arg.ID, arg.Name, arg.Value)
	var i UpdateOptionRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PollID,
	)
	return i, err
}
