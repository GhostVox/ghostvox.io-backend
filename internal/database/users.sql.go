// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
    users (email, first_name, last_name, user_token, role)
VALUES
    ($1, $2, $3, $4, $5)
RETURNING
    id, created_at, updated_at, email, first_name, last_name, user_token, role
`

type CreateUserParams struct {
	Email     string
	FirstName string
	LastName  sql.NullString
	UserToken string
	Role      string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.UserToken,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.UserToken,
		&i.Role,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT
    id, created_at, updated_at, email, first_name, last_name, user_token, role
FROM
    users
WHERE
    email = $1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.UserToken,
		&i.Role,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
Select
    id, created_at, updated_at, email, first_name, last_name, user_token, role
FROM
    users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.UserToken,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE
    users
SET
    email = $1,
    first_name = $2,
    last_name = $3,
    user_token = $4,
    role = $5
WHERE
    id = $6 RETURNING id, created_at, updated_at, email, first_name, last_name, user_token, role
`

type UpdateUserParams struct {
	Email     string
	FirstName string
	LastName  sql.NullString
	UserToken string
	Role      string
	ID        uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.UserToken,
		arg.Role,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.UserToken,
		&i.Role,
	)
	return i, err
}
