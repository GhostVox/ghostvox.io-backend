// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: votes.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createVote = `-- name: CreateVote :one
INSERT INTO votes (poll_id, option_id, user_id)
VALUES ($1, $2, $3) RETURNING id, poll_id, option_id, created_at, user_id
`

type CreateVoteParams struct {
	PollID   uuid.UUID
	OptionID uuid.UUID
	UserID   uuid.UUID
}

func (q *Queries) CreateVote(ctx context.Context, arg CreateVoteParams) (Vote, error) {
	row := q.db.QueryRowContext(ctx, createVote, arg.PollID, arg.OptionID, arg.UserID)
	var i Vote
	err := row.Scan(
		&i.ID,
		&i.PollID,
		&i.OptionID,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}

const deleteVoteByID = `-- name: DeleteVoteByID :exec
DELETE FROM votes WHERE id = $1 RETURNING id, poll_id, option_id, created_at, user_id
`

func (q *Queries) DeleteVoteByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteVoteByID, id)
	return err
}

const deleteVotesByOptionID = `-- name: DeleteVotesByOptionID :exec
DELETE FROM votes WHERE option_id = $1 RETURNING id, poll_id, option_id, created_at, user_id
`

func (q *Queries) DeleteVotesByOptionID(ctx context.Context, optionID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteVotesByOptionID, optionID)
	return err
}

const deleteVotesByPollID = `-- name: DeleteVotesByPollID :exec
DELETE FROM votes WHERE poll_id = $1 RETURNING id, poll_id, option_id, created_at, user_id
`

func (q *Queries) DeleteVotesByPollID(ctx context.Context, pollID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteVotesByPollID, pollID)
	return err
}

const getTotalVotesByPollID = `-- name: GetTotalVotesByPollID :one
SELECT count(*) FROM votes WHERE poll_id = $1
`

func (q *Queries) GetTotalVotesByPollID(ctx context.Context, pollID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalVotesByPollID, pollID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTotalVotesByPollIDs = `-- name: GetTotalVotesByPollIDs :many
SELECT poll_id, COUNT(*) as count
FROM votes
WHERE poll_id = ANY($1::uuid[])
GROUP BY poll_id
`

type GetTotalVotesByPollIDsRow struct {
	PollID uuid.UUID
	Count  int64
}

func (q *Queries) GetTotalVotesByPollIDs(ctx context.Context, dollar_1 []uuid.UUID) ([]GetTotalVotesByPollIDsRow, error) {
	rows, err := q.db.QueryContext(ctx, getTotalVotesByPollIDs, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTotalVotesByPollIDsRow
	for rows.Next() {
		var i GetTotalVotesByPollIDsRow
		if err := rows.Scan(&i.PollID, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVotesByOptionID = `-- name: GetVotesByOptionID :many
SELECT id, poll_id, option_id, created_at, user_id FROM votes WHERE option_id = $1
`

func (q *Queries) GetVotesByOptionID(ctx context.Context, optionID uuid.UUID) ([]Vote, error) {
	rows, err := q.db.QueryContext(ctx, getVotesByOptionID, optionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vote
	for rows.Next() {
		var i Vote
		if err := rows.Scan(
			&i.ID,
			&i.PollID,
			&i.OptionID,
			&i.CreatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVotesByUserID = `-- name: GetVotesByUserID :many
SELECT id, poll_id, option_id, created_at, user_id FROM votes WHERE user_id = $1
`

func (q *Queries) GetVotesByUserID(ctx context.Context, userID uuid.UUID) ([]Vote, error) {
	rows, err := q.db.QueryContext(ctx, getVotesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vote
	for rows.Next() {
		var i Vote
		if err := rows.Scan(
			&i.ID,
			&i.PollID,
			&i.OptionID,
			&i.CreatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
