// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: comments.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (poll_id, user_id, content)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateCommentParams struct {
	PollID  uuid.UUID
	UserID  uuid.UUID
	Content string
}

// in Use in commenthandler.CreateComment
func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.PollID, arg.UserID, arg.Content)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE id = $1 AND user_id = $2
`

type DeleteCommentParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteComment(ctx context.Context, arg DeleteCommentParams) error {
	_, err := q.db.ExecContext(ctx, deleteComment, arg.ID, arg.UserID)
	return err
}

const getAllCommentsByPollID = `-- name: GetAllCommentsByPollID :many
 -- in Use in commenthandler.GetAllPollComments
SELECT comments.id, comments.user_id, comments.poll_id, comments.content, comments.created_at, comments.updated_at, users.user_name as userName, users.picture_url as avatar_url
FROM comments
JOIN users ON comments.user_id = users.id
WHERE poll_id = $1
`

type GetAllCommentsByPollIDRow struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	PollID    uuid.UUID
	Content   string
	CreatedAt time.Time
	UpdatedAt time.Time
	Username  sql.NullString
	AvatarUrl sql.NullString
}

func (q *Queries) GetAllCommentsByPollID(ctx context.Context, pollID uuid.UUID) ([]GetAllCommentsByPollIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllCommentsByPollID, pollID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllCommentsByPollIDRow
	for rows.Next() {
		var i GetAllCommentsByPollIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PollID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Username,
			&i.AvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalComments = `-- name: GetTotalComments :one
SELECT COUNT(*) FROM comments WHERE poll_id = $1
`

func (q *Queries) GetTotalComments(ctx context.Context, pollID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalComments, pollID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTotalCommentsByPollIDs = `-- name: GetTotalCommentsByPollIDs :many
SELECT poll_id, COUNT(*) as count
FROM comments
WHERE poll_id = ANY($1::uuid[])
GROUP BY poll_id
`

type GetTotalCommentsByPollIDsRow struct {
	PollID uuid.UUID
	Count  int64
}

// used by pollhandler.processPollData
func (q *Queries) GetTotalCommentsByPollIDs(ctx context.Context, dollar_1 []uuid.UUID) ([]GetTotalCommentsByPollIDsRow, error) {
	rows, err := q.db.QueryContext(ctx, getTotalCommentsByPollIDs, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTotalCommentsByPollIDsRow
	for rows.Next() {
		var i GetTotalCommentsByPollIDsRow
		if err := rows.Scan(&i.PollID, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
